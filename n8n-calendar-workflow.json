{
  "name": "ONAV Studio Calendar Availability Check",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-test/eab92d5a-c6ee-4c74-9b52-e89997dd4205",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "8b5e1f0a-7b6c-4d3e-9f2a-1c8d7e9f0a1b",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        320,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.checkType }}",
              "rightValue": "availability",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2c9f8e7d-6a5b-4c3d-8e1f-9a0b2c3d4e5f",
      "name": "Check Request Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        540,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "event",
        "operation": "getAll",
        "calendarId": "primary",
        "options": {
          "timeMin": "={{ $json.shootingDate }}T00:00:00.000Z",
          "timeMax": "={{ $json.shootingDate }}T23:59:59.000Z",
          "singleEvents": true
        }
      },
      "id": "3d0e1f2a-8c9d-5e4f-7a8b-9c0d1e2f3a4b",
      "name": "Check Google Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        760,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4e5f6a7b-9c0d-1e2f-3a4b-5c6d7e8f9a0b",
      "name": "Date Available?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        980,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"available\": true,\n  \"message\": \"Studio is available for the requested date\",\n  \"requestedDate\": \"{{ $('Webhook').first().json.shootingDate }}\",\n  \"quoteId\": \"{{ $('Webhook').first().json.quoteId }}\",\n  \"checkedAt\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "5f6a7b8c-0d1e-2f3a-4b5c-6d7e8f9a0b1c",
      "name": "Response Available",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1200,
        100
      ]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "getAll",
        "calendarId": "primary",
        "options": {
          "timeMin": "={{ new Date().toISOString() }}",
          "timeMax": "={{ new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() }}",
          "singleEvents": true
        }
      },
      "id": "6a7b8c9d-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
      "name": "Get Available Dates",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get busy dates from calendar events\nconst busyDates = [];\nconst events = $input.all();\n\nfor (let event of events) {\n  if (event.json.start && event.json.start.date) {\n    busyDates.push(event.json.start.date);\n  } else if (event.json.start && event.json.start.dateTime) {\n    const dateTime = new Date(event.json.start.dateTime);\n    const dateStr = dateTime.toISOString().split('T')[0];\n    busyDates.push(dateStr);\n  }\n}\n\n// Generate alternative dates (next 3 available dates)\nconst alternatives = [];\nconst today = new Date();\n\nfor (let i = 1; i <= 30 && alternatives.length < 3; i++) {\n  const date = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);\n  const dateStr = date.toISOString().split('T')[0];\n  \n  // Skip weekends and busy dates\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek !== 0 && dayOfWeek !== 6 && !busyDates.includes(dateStr)) {\n    alternatives.push({\n      date: dateStr,\n      available: true,\n      dayOfWeek: date.toLocaleDateString('pt-BR', { weekday: 'long' }),\n      formatted: date.toLocaleDateString('pt-BR', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      })\n    });\n  }\n}\n\nreturn [{\n  json: {\n    alternatives: alternatives,\n    busyDates: busyDates,\n    requestedDate: $('Webhook').first().json.shootingDate\n  }\n}];"
      },
      "id": "7b8c9d0e-2f3a-4b5c-6d7e-8f9a0b1c2d3e",
      "name": "Generate Alternatives",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"available\": false,\n  \"message\": \"Studio is not available for the requested date\",\n  \"requestedDate\": \"{{ $('Webhook').first().json.shootingDate }}\",\n  \"quoteId\": \"{{ $('Webhook').first().json.quoteId }}\",\n  \"alternatives\": {{ JSON.stringify($json.alternatives) }},\n  \"checkedAt\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "8c9d0e1f-3a4b-5c6d-7e8f-9a0b1c2d3e4f",
      "name": "Response Not Available",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1640,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.checkType }}",
              "rightValue": "reschedule",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9d0e1f2a-4b5c-6d7e-8f9a-0b1c2d3e4f5a",
      "name": "Check Reschedule",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        760,
        400
      ]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "create",
        "calendarId": "primary",
        "start": "={{ $json.newDate }}T09:00:00.000Z",
        "end": "={{ $json.newDate }}T18:00:00.000Z",
        "summary": "ONAV Studio - {{ $json.quoteSlug }}",
        "description": "Studio booking for ONAV quote: {{ $json.quoteSlug }}\\n\\nRescheduled from previous date.\\n\\nAuto-created by n8n workflow.",
        "options": {}
      },
      "id": "0e1f2a3b-5c6d-7e8f-9a0b-1c2d3e4f5a6b",
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        980,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Date rescheduled successfully\",\n  \"newDate\": \"{{ $json.newDate }}\",\n  \"quoteSlug\": \"{{ $json.quoteSlug }}\",\n  \"eventId\": \"{{ $json.id }}\",\n  \"scheduledAt\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "1f2a3b4c-6d7e-8f9a-0b1c-2d3e4f5a6b7c",
      "name": "Response Rescheduled",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1200,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"error\": \"Invalid request type\",\n  \"message\": \"checkType must be 'availability' or 'reschedule'\",\n  \"received\": \"{{ $json.checkType }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "2a3b4c5d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
      "name": "Response Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        540,
        500
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Check Request Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Request Type": {
      "main": [
        [
          {
            "node": "Check Google Calendar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Reschedule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Google Calendar": {
      "main": [
        [
          {
            "node": "Date Available?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date Available?": {
      "main": [
        [
          {
            "node": "Response Available",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Available Dates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Available Dates": {
      "main": [
        [
          {
            "node": "Generate Alternatives",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Alternatives": {
      "main": [
        [
          {
            "node": "Response Not Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Reschedule": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Response Rescheduled",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b24e2b4c-5d6e-7f8a-9b0c-1d2e3f4a5b6c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12345678-1234-1234-1234-123456789012"
  },
  "id": "calendar-availability-workflow",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "calendar-tag",
      "name": "calendar"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "onav-tag",
      "name": "onav"
    }
  ]
}